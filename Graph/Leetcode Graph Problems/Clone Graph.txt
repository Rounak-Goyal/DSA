/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
private:
    unordered_map<Node*,Node*> hash;
public:
    //by dfs 
    Node* cloneGraph(Node* node) {
        if(!node) return node;
        if(hash.find(node) == hash.end()){
            hash[node] = new Node(node->val);
            for(auto x: node->neighbors){
                (hash[node]->neighbors).push_back(cloneGraph(x));
            }
        }
        return hash[node];  
    }
    //by bfs
    Node* cloneGraph(Node* node) {
        if (!node) {
            return NULL;
        }
        hash[node] = new Node(node -> val, {});
        queue<Node*> q;
        q.push(node);
        while (!q.empty()) {
            Node* cur = q.front();
            q.pop();
            for (Node* neighbor : cur -> neighbors) {
                if (hash.find(neighbor) == hash.end()) {
                    hash[neighbor] = new Node(neighbor -> val, {});
                    q.push(neighbor);
                }
                (hash[cur] -> neighbors).push_back(hash[neighbor]);
            }
        }
        return hash[node];
    }
};